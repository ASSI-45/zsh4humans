()  {
  eval "$_z4h_opt"

  local -i dot_glob list_types
  [[ $1 == on ]] && dot_glob=1
  [[ $2 == on ]] && list_types=1

  [[ -w $TTY && -r $TTY ]] || return

  if (( dot_glob )); then
    local dirs=(./*(-/DN))
  else
    local dirs=(./*(-/N))
  fi

  local non_empty=(${^dirs}(-FN))

  local -a cmd
  if (( $#non_empty )); then
    local -a prune
    if (( dot_glob )); then
      prune=(-path '*/.*/*')
    else
      prune=(-path '*/.*')
    fi
    if [[ ${commands[find]:A} != */busybox* ]]; then
      prune+=(-o -fstype sysfs -o -fstype devfs -o -fstype devtmpfs -o -fstype proc)
    fi
    cmd=(command find -L $non_empty -mindepth 1 '(' $prune ')' -prune -o -type d -print)
  fi

  local query char
  for char in ${(s::)dirs[1]}; do
    [[ -z ${dirs:#$query$char*} ]] || break
    query+=$char
  done

  local opt=(
    --with-nth=2
    --delimiter='\000'
    --ansi
    --exact
    --layout=reverse
    --height=$(( ! $#non_empty && 100 * ($#dirs + 2) < 60 * LINES ? $#dirs + 2 : 60 * LINES / 100 ))
    --tiebreak=length,begin,index
    --no-multi
    --cycle
    --query=${query:2}
    --bind=tab:down,btab:up)

  -z4h-set-list-colors complete:cd:: "$list_types"
  local -i list_colors=$((!$?))

  {
    -z4h-show-dots

    local esc line col
    IFS='[;' read -s -d R esc\?$'\e[6n' line col <$TTY || return
    print >$TTY || return

    {
      local dir
      dir=$(
        unsetopt pipe_fail
        exec 2>/dev/null
        {
          print -rC1 -- $dirs
          "${cmd[@]}"
        } | command cut -b3- | -z4h-present-files $list_colors $list_types | {
          -z4h-cursor-show
          $Z4H/fzf/bin/fzf $opt 2>$TTY
        } always {
          -z4h-cursor-hide
        }) || return
      [[ -n $dir ]] || return
      cd -- $dir
      return
    } always {
      echoti cuu 1
      (( col > 1 )) && echoti cuf $((col-1))
    }
  } always {
    if (( $? )); then
      zle -R
      -z4h-cursor-show
    else
      zle -R
    fi
  }
} "${options[dotglob]}" "${options[list_types]}" && -z4h-redraw-prompt
