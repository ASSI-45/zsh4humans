# TODO:
#
#   - add :z4h:ssh:$z4h_ssh_host env ZDOTDIR='~' Z4H='blah'
#   - add :z4h:ssh:$z4h_ssh_host ssh-flags -o ControlMaster=auto -o ControlPersist=10 -o ControlPath=$HOME/.ssh/control-master-%h-%p-%r

if false; then
  zstyle ':z4h:ssh:*' send-extra-files '~/.vimrc' '"$HOME"/vim'

  z4h-ssh-configure() {
    z4h_ssh_setup+=(
      'export PATH="/usr/local/bin:$PATH"'
    )
    z4h_ssh_send_files+=(
      $HOME/.vim   '"$HOME"/.vim'
      $HOME/.vimrc '"$HOME"/.vimrc'
    )
    z4h_ssh_run=(
      'echo yo'
      $z4h_ssh_launch_commands
    )
    z4h_ssh_teardown+=(
      'echo yo'
    )
    z4h_ssh_retrieve_files+=(
      '"$HOME"/.vimrc' "$HOME"/.vimrc
    )
  }
fi

local -i i
local -a pos
for ((i = 1; i <= $#; ++i)); do
  case $*[i] in
    --) (( ++i <= $# )) && pos+=({$i..$#}); break;;
    -O) command ssh "$@"; return;;
    -*) [[ bcDEeFIiJLlmOopQRSWw == *${${*[i]}[-1]}* ]] && ((++i));;
    *)  pos+=($i);;
  esac
done

if (( $#pos != 1 )); then
  command ssh "$@"
  return
fi

local user_host=$*[pos[1]]
local -r z4h_ssh_host=${${user_host##*@}%%:*}
if [[ -z $z4h_ssh_host ]] || zstyle -t :z4h:ssh:$z4h_ssh_host passthrough; then
  command ssh "$@"
  return
fi

local z4h_ssh_setup=(
  '"export" ZDOTDIR="$HOME"'
  '"export" LC_ALL="$C"')

local z4h_ssh_send_files=(
  $ZDOTDIR/.zshenv   '"$ZDOTDIR"/.zshenv'
  $ZDOTDIR/.zprofile '"$ZDOTDIR"/.zprofile'
  $ZDOTDIR/.zshrc    '"$ZDOTDIR"/.zshrc'
  $ZDOTDIR/.zlogin   '"$ZDOTDIR"/.zlogin'
  $ZDOTDIR/.zlogout  '"$ZDOTDIR"/.zlogout')
local file
for file in $ZDOTDIR/.p10k{,-ascii}{,-8color}.zsh(N) $ZDOTDIR/.zsh_history.*:$z4h_ssh_host(N); do
  z4h_ssh_send_files+=($file '"$ZDOTDIR"/'${(q)file:t})
done
local -a extra_files
if zstyle -a :z4h:ssh:$z4h_ssh_host send-extra-files extra_files; then
  local src dst
  for dst in $extra_files; do
    eval "src=$dst"
    z4h_ssh_send_files+=("$src" "$dst")
  done
fi

local z4h_ssh_run=()

if (( $#files % 2 )); then
  print -Pru2 -- "%F{3}z4h%f: odd number of elements: %F{1}zstyle :z4h:ssh:${z4h_ssh_host//\%/%%}%f"
  return 1
fi

if (( ! $#files )); then
  print -Pru2 -- "%F{3}z4h%f: zero elements: %F{1}zstyle :z4h:ssh:${z4h_ssh_host//\%/%%}%f"
  return 1
fi

local tmpdir
if (( $+commands[mktemp] )); then
  tmpdir=$(command mktemp -d -- $Z4H/tmp/ssh.XXXXXXXXXX) || return
else
  tmpdir=$Z4H/tmp/ssh.tmp.$sysparams[pid]
  zf_rm -rf -- $tmpdir || return
  zf_mkdir -- $tmpdir || return
fi

{
  local -i i
  local -a sources destinations
  for ((i = 1; i < $#files; i += 2)); do
    local src=$files[i]
    local dst=$files[i+1]
    if [[ -z $src || -z $dst ]]; then
      print -Pru2 -- "%F{3}z4h%f: empty values: %F{1}zstyle :z4h:ssh:${z4h_ssh_host//\%/%%}%f"
      return 1
    fi
    if [[ $src == */ ]]; then
      print -Pru2 -- "%F{3}z4h%f: file path ending in %B/%b: %F{1}${src//\%/%%}%f"
      return 1
    fi
    if [[ ${(Q)dst} == */ ]]; then
      print -Pru2 -- "%F{3}z4h%f: file path ending in %B/%b: %F{1}${dst//\%/%%}%f"
      return 1
    fi
    destinations+=($dst)
    [[ -e $src ]] || continue
    local target=${src:A}
    if [[ -z $target(#qN.) && -z $target(#qN/) ]]; then
      print -Pru2 -- "%F{3}z4h%f: unsupported file type: %F{1}${src//\%/%%}%f"
      return 1
    fi
    if [[ ${tmpdir:A} == $target(|/*) ]]; then
      print -Pru2 -- "%F{3}z4h%f: cannot send file: %F{1}${src//\%/%%}%f"
      return 1
    fi
    command ln -s -- $target $tmpdir/$((i/2)) || return
    sources+=($((i/2)))
  done

  local script connection=${(%):-%m}:$z4h_ssh_host
  script="$(<$Z4H/zsh4humans/sc/ssh-bootstrap)" || return
  script=${script/'^CONNECTION^'/${(qqq)connection}}
  script=${script/'^DESTINATIONS^'/${(j: :)destinations}}
  script=${script/'^DUMP_POS^'/${(r:8:: :)${#script}}}

  print -r -- $script >$tmpdir/script || return

  if (( $#sources )); then
    local tar_version tar_opt
    if tar_version=$(command tar --version 2>/dev/null) && [[ $tar_version == *'GNU tar'* ]]; then
      tar_opt=(--owner=0 --group=0)
    fi
    command tar -C $tmpdir $tar_opt -czhf - -- $sources >>$tmpdir/script || return
  fi

  local args=("$@")
  args[pos[1],pos[1]-1]=('-T')
  local remote_script=/tmp/z4h-ssh.${(%):-%n}.$sysparams[pid].$EPOCHSECONDS.$RANDOM
  command ssh "${args[@]}" "/bin/cat >$remote_script" <$tmpdir/script || return
} always {
  zf_rm -rf -- $tmpdir
}

args[pos[1]]='-t'
command ssh "${args[@]}" "/bin/sh $remote_script" || return
