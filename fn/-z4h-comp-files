()  {
  eval "$_z4h_opt"

  local -i dot_glob list_types
  [[ $1 == on ]] && dot_glob=1
  [[ $2 == on ]] && list_types=1

  if (( _z4h_only_dirs )); then
    if (( dot_glob )); then
      local dirs=($_z4h_path_prefix${^${(Q)_z4h_words:#.*}}/*(D-/Y1N:h:t))
    else
      local dirs=($_z4h_path_prefix${^${(Q)_z4h_words:#.*}}/*(-/Y1N:h:t))
    fi
  else
    if (( dot_glob )); then
      local dirs=($_z4h_path_prefix${^${(Q)_z4h_words:#.*}}/*(DY1N:h:t))
    else
      local dirs=($_z4h_path_prefix${^${(Q)_z4h_words:#.*}}/*(Y1N:h:t))
    fi
  fi

  local bind=(
    ctrl-h:backward-kill-word
    alt-j:clear-query
    ctrl-u:clear-query
    ctrl-k:kill-line
    alt-k:unix-line-discard
    tab:down
    btab:up
    ctrl-space:toggle
    ctrl-a:select-all)
  local opt=(
    --query=${_z4h_word_prefix:+"^$_z4h_word_prefix"}
    --color=hl:201,hl+:201
    --expect=enter
    --with-nth=2
    --delimiter='\000'
    --ansi
    --exact
    --no-mouse
    --layout=reverse
    --height=$(( ! $#dirs && 100 * ($#_z4h_words + 2) < 60 * LINES ? $#_z4h_words + 2 : 60 * LINES / 100 ))
    --tiebreak=length,begin,index
    --multi
    --cycle
    --bind=${(j:,:)bind})
  local cont
  if zstyle -s :fzf-tab:$_z4h_curcontext:default continuous-trigger cont && [[ -n $cont ]]; then
    opt+=(--expect=$cont)
  fi

  -z4h-set-list-colors "$_z4h_curcontext" "$list_types"
  local -i list_colors=$((!$?))

  autoload +X -Uz -- -z4h-present-files -z4h-cursor-show -z4h-find

  local esc line col
  IFS='[;' builtin read -s -d R esc\?$'\e[6n' line col <$TTY || return
  print >$TTY || return

  {
    local choice
    choice="$(
      unsetopt pipe_fail
      exec 2>/dev/null
      [[ -n $_z4h_path_prefix ]] && builtin cd -q -- $_z4h_path_prefix
      {
        print -lr -- ${(Q)_z4h_words}
        -z4h-find $dot_glob $_z4h_only_dirs $dirs | command cut -b3-
      } | {
        -z4h-present-files $list_colors $list_types
      } | {
        -z4h-cursor-show
        $Z4H/fzf/bin/fzf $opt 2>$TTY
      }
    )"
  } always {
    -z4h-cursor-hide
    builtin echoti cuu 1
    (( col > 1 )) && builtin echoti cuf $((col-1))
  }

  [[ -n $choice ]] || return
  choice=("${(@f)choice}")
  typeset -g _z4h_reply=(0 ${${choice:1}%$'\0'*})
  if [[ -n $cont && $choice[1] == $cont ]]; then
    _z4h_reply[1]=1
  fi
} "${options[dot_glob]}" "${options[list_types]}"
